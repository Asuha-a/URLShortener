// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package url

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// URLClient is the client API for URL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLClient interface {
	GetAllURL(ctx context.Context, in *GetAllURLRequest, opts ...grpc.CallOption) (URL_GetAllURLClient, error)
	GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*GetURLReply, error)
	PostURL(ctx context.Context, in *PostURLRequest, opts ...grpc.CallOption) (*PostURLReply, error)
	PutURL(ctx context.Context, in *PutURLRequest, opts ...grpc.CallOption) (*PutURLReply, error)
	DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type uRLClient struct {
	cc grpc.ClientConnInterface
}

func NewURLClient(cc grpc.ClientConnInterface) URLClient {
	return &uRLClient{cc}
}

func (c *uRLClient) GetAllURL(ctx context.Context, in *GetAllURLRequest, opts ...grpc.CallOption) (URL_GetAllURLClient, error) {
	stream, err := c.cc.NewStream(ctx, &_URL_serviceDesc.Streams[0], "/url.URL/GetAllURL", opts...)
	if err != nil {
		return nil, err
	}
	x := &uRLGetAllURLClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type URL_GetAllURLClient interface {
	Recv() (*GetAllURLReply, error)
	grpc.ClientStream
}

type uRLGetAllURLClient struct {
	grpc.ClientStream
}

func (x *uRLGetAllURLClient) Recv() (*GetAllURLReply, error) {
	m := new(GetAllURLReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uRLClient) GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*GetURLReply, error) {
	out := new(GetURLReply)
	err := c.cc.Invoke(ctx, "/url.URL/GetURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLClient) PostURL(ctx context.Context, in *PostURLRequest, opts ...grpc.CallOption) (*PostURLReply, error) {
	out := new(PostURLReply)
	err := c.cc.Invoke(ctx, "/url.URL/PostURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLClient) PutURL(ctx context.Context, in *PutURLRequest, opts ...grpc.CallOption) (*PutURLReply, error) {
	out := new(PutURLReply)
	err := c.cc.Invoke(ctx, "/url.URL/PutURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLClient) DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/url.URL/DeleteURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLServer is the server API for URL service.
// All implementations must embed UnimplementedURLServer
// for forward compatibility
type URLServer interface {
	GetAllURL(*GetAllURLRequest, URL_GetAllURLServer) error
	GetURL(context.Context, *GetURLRequest) (*GetURLReply, error)
	PostURL(context.Context, *PostURLRequest) (*PostURLReply, error)
	PutURL(context.Context, *PutURLRequest) (*PutURLReply, error)
	DeleteURL(context.Context, *DeleteURLRequest) (*empty.Empty, error)
	mustEmbedUnimplementedURLServer()
}

// UnimplementedURLServer must be embedded to have forward compatible implementations.
type UnimplementedURLServer struct {
}

func (UnimplementedURLServer) GetAllURL(*GetAllURLRequest, URL_GetAllURLServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllURL not implemented")
}
func (UnimplementedURLServer) GetURL(context.Context, *GetURLRequest) (*GetURLReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (UnimplementedURLServer) PostURL(context.Context, *PostURLRequest) (*PostURLReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostURL not implemented")
}
func (UnimplementedURLServer) PutURL(context.Context, *PutURLRequest) (*PutURLReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutURL not implemented")
}
func (UnimplementedURLServer) DeleteURL(context.Context, *DeleteURLRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURL not implemented")
}
func (UnimplementedURLServer) mustEmbedUnimplementedURLServer() {}

// UnsafeURLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLServer will
// result in compilation errors.
type UnsafeURLServer interface {
	mustEmbedUnimplementedURLServer()
}

func RegisterURLServer(s grpc.ServiceRegistrar, srv URLServer) {
	s.RegisterService(&_URL_serviceDesc, srv)
}

func _URL_GetAllURL_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllURLRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(URLServer).GetAllURL(m, &uRLGetAllURLServer{stream})
}

type URL_GetAllURLServer interface {
	Send(*GetAllURLReply) error
	grpc.ServerStream
}

type uRLGetAllURLServer struct {
	grpc.ServerStream
}

func (x *uRLGetAllURLServer) Send(m *GetAllURLReply) error {
	return x.ServerStream.SendMsg(m)
}

func _URL_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url.URL/GetURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServer).GetURL(ctx, req.(*GetURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URL_PostURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServer).PostURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url.URL/PostURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServer).PostURL(ctx, req.(*PostURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URL_PutURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServer).PutURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url.URL/PutURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServer).PutURL(ctx, req.(*PutURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URL_DeleteURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServer).DeleteURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url.URL/DeleteURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServer).DeleteURL(ctx, req.(*DeleteURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _URL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "url.URL",
	HandlerType: (*URLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetURL",
			Handler:    _URL_GetURL_Handler,
		},
		{
			MethodName: "PostURL",
			Handler:    _URL_PostURL_Handler,
		},
		{
			MethodName: "PutURL",
			Handler:    _URL_PutURL_Handler,
		},
		{
			MethodName: "DeleteURL",
			Handler:    _URL_DeleteURL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllURL",
			Handler:       _URL_GetAllURL_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/pb/url/url.proto",
}
